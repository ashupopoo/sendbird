{"version":3,"names":["useRef","ASYNC_NOOP","Logger","confirmAndMarkAsRead","isDifferentChannel","isMyMessage","useAsyncEffect","useForceUpdate","useFreshCallback","useUniqHandlerId","useChannelHandler","useChannelMessagesReducer","createMessageQuery","channel","creator","createPreviousMessageListQuery","limit","reverse","useGroupChannelMessagesWithQuery","sdk","userId","options","queryRef","handlerId","forceUpdate","loading","refreshing","messages","newMessages","updateMessages","deleteMessages","updateNewMessages","deleteNewMessages","updateLoading","updateRefreshing","sortComparator","channelMarkAsRead","e","warn","init","uid","_queryRef$current","currentUser","current","queryCreator","hasNext","_queryRef$current2","list","load","channelUpdater","isGroupChannel","onMessageReceived","eventChannel","message","_options$shouldCountN","shouldCountNewMessages","call","onMessagesReceived","onMessageUpdated","onMessageDeleted","messageId","onReactionUpdated","reactionEvent","getMessage","includeReactions","includeParentMessageInfo","includeThreadInfo","includeMetaArray","channelUrl","url","channelType","onChannelChanged","onChannelFrozen","onChannelUnfrozen","onChannelHidden","onChannelMemberCountChanged","channels","foundChannel","find","c","onChannelDeleted","_options$onChannelDel","onOperatorUpdated","onUserLeft","onUserJoined","onUserUnbanned","onUserMuted","onUserUnmuted","onUserBanned","bannedUser","_options$onChannelDel2","refresh","prev","_queryRef$current3","_queryRef$current4","hasPrev","_queryRef$current5","next","sendUserMessage","params","onPending","Promise","resolve","reject","pendingMessage","isUserMessage","onSucceeded","sentMessage","onFailed","err","sendFileMessage","isFileMessage","updateUserMessage","updatedMessage","updateFileMessage","resendMessage","failedMessage","resendUserMessage","resendFileMessage","deleteMessage","sendingStatus","reqId","resetNewMessages","resetWithStartingPoint","nextMessages","newMessagesFromMembers"],"sources":["useGroupChannelMessagesWithQuery.ts"],"sourcesContent":["import { useRef } from 'react';\n\nimport type {\n  SendbirdBaseChannel,\n  SendbirdGroupChannel,\n  SendbirdPreviousMessageListQuery,\n} from '@sendbird/uikit-utils';\nimport {\n  ASYNC_NOOP,\n  Logger,\n  confirmAndMarkAsRead,\n  isDifferentChannel,\n  isMyMessage,\n  useAsyncEffect,\n  useForceUpdate,\n  useFreshCallback,\n  useUniqHandlerId,\n} from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../../handler/useChannelHandler';\nimport type { UseGroupChannelMessages, UseGroupChannelMessagesOptions } from '../../types';\nimport { useChannelMessagesReducer } from '../useChannelMessagesReducer';\n\nconst createMessageQuery = (\n  channel: SendbirdGroupChannel,\n  creator?: UseGroupChannelMessagesOptions['queryCreator'],\n) => {\n  if (creator) return creator();\n  return channel.createPreviousMessageListQuery({\n    limit: 100,\n    reverse: true,\n  });\n};\n\nexport const useGroupChannelMessagesWithQuery: UseGroupChannelMessages = (sdk, channel, userId, options) => {\n  const queryRef = useRef<SendbirdPreviousMessageListQuery>();\n  const handlerId = useUniqHandlerId('useGroupChannelMessagesWithQuery');\n\n  const forceUpdate = useForceUpdate();\n\n  const {\n    loading,\n    refreshing,\n    messages,\n    newMessages,\n    updateMessages,\n    deleteMessages,\n    updateNewMessages,\n    deleteNewMessages,\n    updateLoading,\n    updateRefreshing,\n  } = useChannelMessagesReducer(options?.sortComparator);\n\n  const channelMarkAsRead = async () => {\n    try {\n      await confirmAndMarkAsRead([channel]);\n    } catch (e) {\n      Logger.warn('[useGroupChannelMessagesWithQuery/channelMarkAsRead]', e);\n    }\n  };\n\n  const init = useFreshCallback(async (uid?: string) => {\n    if (uid) {\n      channelMarkAsRead();\n      updateNewMessages([], true, sdk.currentUser.userId);\n\n      queryRef.current = createMessageQuery(channel, options?.queryCreator);\n      if (queryRef.current?.hasNext) {\n        const list = await queryRef.current?.load();\n        updateMessages(list, true, sdk.currentUser.userId);\n      }\n    }\n  });\n\n  const channelUpdater = (channel: SendbirdBaseChannel) => {\n    if (channel.isGroupChannel() && !isDifferentChannel(channel, channel)) {\n      forceUpdate();\n    }\n  };\n\n  useChannelHandler(sdk, handlerId, {\n    // Messages\n    onMessageReceived(eventChannel, message) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      if (isMyMessage(message, sdk.currentUser.userId)) return;\n\n      channelMarkAsRead();\n\n      updateMessages([message], false, sdk.currentUser.userId);\n      if (options?.shouldCountNewMessages?.()) {\n        updateNewMessages([message], false, sdk.currentUser.userId);\n      }\n      if (options?.onMessagesReceived) {\n        options.onMessagesReceived([message]);\n      }\n    },\n    onMessageUpdated(eventChannel, message) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      if (isMyMessage(message, sdk.currentUser.userId)) return;\n\n      updateMessages([message], false, sdk.currentUser.userId);\n    },\n    onMessageDeleted(eventChannel, messageId) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      deleteMessages([messageId], []);\n      deleteNewMessages([messageId], []);\n    },\n    async onReactionUpdated(eventChannel, reactionEvent) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n\n      const message = await sdk.message.getMessage({\n        messageId: reactionEvent.messageId,\n        includeReactions: true,\n        includeParentMessageInfo: true,\n        includeThreadInfo: true,\n        includeMetaArray: true,\n        channelUrl: channel.url,\n        channelType: channel.channelType,\n      });\n      updateMessages([message], false, sdk.currentUser.userId);\n    },\n    // Channels\n    onChannelChanged: channelUpdater,\n    onChannelFrozen: channelUpdater,\n    onChannelUnfrozen: channelUpdater,\n    onChannelHidden: channelUpdater,\n    onChannelMemberCountChanged(channels) {\n      const foundChannel = channels.find((c) => !isDifferentChannel(c, channel));\n      if (foundChannel) channelUpdater(foundChannel);\n    },\n    onChannelDeleted(channelUrl: string) {\n      if (channel.url === channelUrl) options?.onChannelDeleted?.();\n    },\n    // Users\n    onOperatorUpdated: channelUpdater,\n    onUserLeft: channelUpdater,\n    // onUserEntered: channelUpdater,\n    // onUserExited: channelUpdater,\n    onUserJoined: channelUpdater,\n    onUserUnbanned: channelUpdater,\n    onUserMuted: channelUpdater,\n    onUserUnmuted: channelUpdater,\n    onUserBanned(eventChannel, bannedUser) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n\n      if (bannedUser.userId === sdk.currentUser.userId) {\n        options?.onChannelDeleted?.();\n      } else {\n        channelUpdater(eventChannel);\n      }\n    },\n  });\n\n  useAsyncEffect(async () => {\n    updateLoading(true);\n    await init(userId);\n    updateLoading(false);\n  }, [channel.url, userId]);\n\n  const refresh: ReturnType<UseGroupChannelMessages>['refresh'] = useFreshCallback(async () => {\n    updateRefreshing(true);\n    await init(userId);\n    updateRefreshing(false);\n  });\n\n  const prev: ReturnType<UseGroupChannelMessages>['prev'] = useFreshCallback(async () => {\n    if (queryRef.current && queryRef.current?.hasNext) {\n      const list = await queryRef.current?.load();\n      updateMessages(list, false, sdk.currentUser.userId);\n    }\n  });\n  const hasPrev: ReturnType<UseGroupChannelMessages>['hasPrev'] = useFreshCallback(\n    () => queryRef.current?.hasNext ?? false,\n  );\n\n  const next: ReturnType<UseGroupChannelMessages>['next'] = useFreshCallback(ASYNC_NOOP);\n  const hasNext: ReturnType<UseGroupChannelMessages>['hasNext'] = useFreshCallback(() => false);\n\n  const sendUserMessage: ReturnType<UseGroupChannelMessages>['sendUserMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendUserMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isUserMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isUserMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, sentMessage) => {\n            updateMessages([sentMessage], false, sdk.currentUser.userId);\n            reject(err);\n          });\n      });\n    },\n  );\n  const sendFileMessage: ReturnType<UseGroupChannelMessages>['sendFileMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isFileMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isFileMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, sentMessage) => {\n            updateMessages([sentMessage], false, sdk.currentUser.userId);\n            reject(err);\n          });\n      });\n    },\n  );\n  const updateUserMessage: ReturnType<UseGroupChannelMessages>['updateUserMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateUserMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n  );\n  const updateFileMessage: ReturnType<UseGroupChannelMessages>['updateFileMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateFileMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n  );\n  const resendMessage: ReturnType<UseGroupChannelMessages>['resendMessage'] = useFreshCallback(\n    async (failedMessage) => {\n      const message = await (() => {\n        if (failedMessage.isUserMessage()) return channel.resendUserMessage(failedMessage);\n        if (failedMessage.isFileMessage()) return channel.resendFileMessage(failedMessage);\n        return null;\n      })();\n\n      if (message) updateMessages([message], false, sdk.currentUser.userId);\n    },\n  );\n  const deleteMessage: ReturnType<UseGroupChannelMessages>['deleteMessage'] = useFreshCallback(async (message) => {\n    if (message.sendingStatus === 'succeeded') {\n      if (message.isUserMessage()) await channel.deleteMessage(message);\n      if (message.isFileMessage()) await channel.deleteMessage(message);\n    } else {\n      deleteMessages([message.messageId], [message.reqId]);\n    }\n  });\n  const resetNewMessages: ReturnType<UseGroupChannelMessages>['resetNewMessages'] = useFreshCallback(() => {\n    updateNewMessages([], true, sdk.currentUser.userId);\n  });\n\n  return {\n    loading,\n    refreshing,\n    refresh,\n    messages,\n    newMessages,\n    resetNewMessages,\n    next,\n    hasNext,\n    prev,\n    hasPrev,\n    sendUserMessage,\n    sendFileMessage,\n    updateUserMessage,\n    updateFileMessage,\n    resendMessage,\n    deleteMessage,\n    resetWithStartingPoint() {\n      Logger.warn('resetWithStartingPoint is not supported in Query, please use Collection instead.');\n    },\n\n    nextMessages: newMessages,\n    newMessagesFromMembers: newMessages,\n  };\n};\n"],"mappings":"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"}