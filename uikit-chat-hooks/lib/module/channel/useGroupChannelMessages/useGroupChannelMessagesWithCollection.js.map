{"version":3,"names":["useEffect","useRef","MessageCollectionInitPolicy","MessageEventSource","MessageFilter","Logger","confirmAndMarkAsRead","isDifferentChannel","isMyMessage","useForceUpdate","useFreshCallback","useUniqHandlerId","useChannelHandler","useChannelMessagesReducer","MESSAGE_LIMIT","DEFAULT","SEARCH","createMessageCollection","channel","limit","options","collectionCreator","startingPoint","filter","isNotEmpty","arr","length","useGroupChannelMessagesWithCollection","sdk","userId","initialStartingPoint","Number","MAX_SAFE_INTEGER","initialLimit","forceUpdate","collectionRef","collectionInitializedRef","handlerId","loading","refreshing","messages","newMessages","updateMessages","updateNewMessages","deleteNewMessages","deleteMessages","updateLoading","updateRefreshing","sortComparator","channelMarkAsRead","source","EVENT_MESSAGE_RECEIVED","EVENT_MESSAGE_SENT_SUCCESS","SYNC_MESSAGE_FILL","undefined","e","warn","updateUnsendMessages","pendingMessages","failedMessages","current","currentUser","init","callback","_collectionRef$curren","_collectionRef$curren2","dispose","setMessageCollectionHandler","onMessagesAdded","_","__","incomingMessages","it","EVENT_MESSAGE_SENT_PENDING","EVENT_MESSAGE_SENT_FAILED","_options$shouldCountN","shouldCountNewMessages","call","_options$onMessagesRe","onMessagesReceived","onMessagesUpdated","EVENT_MESSAGE_UPDATED","_options$shouldCountN2","onMessagesDeleted","messageIds","onChannelDeleted","_options$onChannelDel","onChannelUpdated","eventChannel","isGroupChannel","onHugeGapDetected","initialize","CACHE_AND_REPLACE_BY_API","onCacheResult","err","isCacheEnabled","error","debug","onApiResult","_options$onMessagesRe2","onUserBanned","bannedUser","_options$onChannelDel2","setTimeout","url","_collectionRef$curren3","refresh","prev","_collectionRef$curren4","hasPrevious","_collectionRef$curren5","list","loadPrevious","hasPrev","next","_collectionRef$curren6","hasNext","_collectionRef$curren7","fetchedList","loadNext","sendUserMessage","params","onPending","Promise","resolve","reject","pendingMessage","isUserMessage","onSucceeded","sentMessage","onFailed","failedMessage","sendFileMessage","isFileMessage","updateUserMessage","messageId","updatedMessage","updateFileMessage","resendMessage","resentMessage","resendUserMessage","resendFileMessage","deleteMessage","message","sendingStatus","_collectionRef$curren8","removeFailedMessage","reqId","resetNewMessages","resetWithStartingPoint","nextMessages","newMessagesFromMembers"],"sources":["useGroupChannelMessagesWithCollection.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { MessageCollectionInitPolicy, MessageEventSource, MessageFilter } from '@sendbird/chat/groupChannel';\nimport type { SendbirdFileMessage, SendbirdGroupChannel, SendbirdMessageCollection } from '@sendbird/uikit-utils';\nimport {\n  Logger,\n  confirmAndMarkAsRead,\n  isDifferentChannel,\n  isMyMessage,\n  useForceUpdate,\n  useFreshCallback,\n  useUniqHandlerId,\n} from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../../handler/useChannelHandler';\nimport type { UseGroupChannelMessages, UseGroupChannelMessagesOptions } from '../../types';\nimport { useChannelMessagesReducer } from '../useChannelMessagesReducer';\n\nconst MESSAGE_LIMIT = {\n  DEFAULT: 50,\n  SEARCH: 20,\n};\n\nconst createMessageCollection = (\n  channel: SendbirdGroupChannel,\n  limit: number,\n  options?: UseGroupChannelMessagesOptions,\n) => {\n  if (options?.collectionCreator) return options?.collectionCreator({ startingPoint: options?.startingPoint });\n  const filter = new MessageFilter();\n  return channel.createMessageCollection({ filter, limit, startingPoint: options?.startingPoint });\n};\n\nfunction isNotEmpty(arr?: unknown[]): arr is unknown[] {\n  if (!arr) return false;\n  return arr.length !== 0;\n}\n\nexport const useGroupChannelMessagesWithCollection: UseGroupChannelMessages = (sdk, channel, userId, options) => {\n  const initialStartingPoint = options?.startingPoint ?? Number.MAX_SAFE_INTEGER;\n  const initialLimit = typeof options?.startingPoint === 'number' ? MESSAGE_LIMIT.SEARCH : MESSAGE_LIMIT.DEFAULT;\n\n  const forceUpdate = useForceUpdate();\n  const collectionRef = useRef<SendbirdMessageCollection>();\n  const collectionInitializedRef = useRef(false);\n  const handlerId = useUniqHandlerId('useGroupChannelMessagesWithCollection');\n\n  const {\n    loading,\n    refreshing,\n    messages,\n    newMessages,\n    updateMessages,\n    updateNewMessages,\n    deleteNewMessages,\n    deleteMessages,\n    updateLoading,\n    updateRefreshing,\n  } = useChannelMessagesReducer(options?.sortComparator);\n\n  const channelMarkAsRead = async (source?: MessageEventSource) => {\n    try {\n      switch (source) {\n        case MessageEventSource.EVENT_MESSAGE_RECEIVED:\n        case MessageEventSource.EVENT_MESSAGE_SENT_SUCCESS:\n        case MessageEventSource.SYNC_MESSAGE_FILL:\n        case undefined:\n          await confirmAndMarkAsRead([channel]);\n          break;\n      }\n    } catch (e) {\n      Logger.warn('[useGroupChannelMessagesWithCollection/channelMarkAsRead]', e);\n    }\n  };\n\n  const updateUnsendMessages = () => {\n    const { pendingMessages, failedMessages } = collectionRef.current ?? {};\n    if (isNotEmpty(pendingMessages)) updateMessages(pendingMessages, false, sdk.currentUser.userId);\n    if (isNotEmpty(failedMessages)) updateMessages(failedMessages, false, sdk.currentUser.userId);\n  };\n\n  const init = useFreshCallback(async (startingPoint: number, limit: number, callback?: () => void) => {\n    if (collectionRef.current) collectionRef.current?.dispose();\n\n    channelMarkAsRead();\n    updateNewMessages([], true, sdk.currentUser.userId);\n\n    collectionInitializedRef.current = false;\n    collectionRef.current = createMessageCollection(channel, limit, {\n      collectionCreator: options?.collectionCreator,\n      startingPoint,\n    });\n\n    collectionRef.current?.setMessageCollectionHandler({\n      onMessagesAdded: (_, __, messages) => {\n        channelMarkAsRead(_.source);\n\n        const incomingMessages = messages.filter((it) => {\n          switch (_.source) {\n            case MessageEventSource.EVENT_MESSAGE_SENT_PENDING:\n            case MessageEventSource.EVENT_MESSAGE_SENT_SUCCESS:\n            case MessageEventSource.EVENT_MESSAGE_SENT_FAILED:\n              return !isMyMessage(it, sdk.currentUser.userId);\n            default:\n              return true;\n          }\n        });\n\n        if (incomingMessages.length > 0) {\n          updateMessages(incomingMessages, false, sdk.currentUser.userId);\n\n          if (options?.shouldCountNewMessages?.()) {\n            updateNewMessages(incomingMessages, false, sdk.currentUser.userId);\n          }\n\n          switch (_.source) {\n            case MessageEventSource.EVENT_MESSAGE_RECEIVED:\n            case MessageEventSource.SYNC_MESSAGE_FILL: {\n              options?.onMessagesReceived?.(incomingMessages);\n            }\n          }\n        }\n      },\n      onMessagesUpdated: (_, __, messages) => {\n        channelMarkAsRead(_.source);\n\n        const incomingMessages = messages.filter((it) => {\n          switch (_.source) {\n            case MessageEventSource.EVENT_MESSAGE_UPDATED:\n              return !isMyMessage(it, sdk.currentUser.userId);\n            default:\n              return true;\n          }\n        });\n\n        if (incomingMessages.length > 0) {\n          // NOTE: admin message is not added via onMessagesAdded handler, not checked yet is this a bug.\n          updateMessages(messages, false, sdk.currentUser.userId);\n\n          if (options?.shouldCountNewMessages?.()) {\n            if (_.source === MessageEventSource.EVENT_MESSAGE_RECEIVED) {\n              updateNewMessages(messages, false, sdk.currentUser.userId);\n            }\n          }\n        }\n      },\n      onMessagesDeleted: (_, __, messageIds) => {\n        deleteMessages(messageIds, []);\n        deleteNewMessages(messageIds, []);\n      },\n      onChannelDeleted: () => {\n        options?.onChannelDeleted?.();\n      },\n      onChannelUpdated: (_, eventChannel) => {\n        if (eventChannel.isGroupChannel() && !isDifferentChannel(eventChannel, channel)) {\n          forceUpdate();\n        }\n      },\n      onHugeGapDetected: () => {\n        init(Number.MAX_SAFE_INTEGER, MESSAGE_LIMIT.DEFAULT);\n      },\n    });\n\n    collectionRef.current\n      .initialize(MessageCollectionInitPolicy.CACHE_AND_REPLACE_BY_API)\n      .onCacheResult((err, messages) => {\n        if (err) sdk.isCacheEnabled && Logger.error('[useGroupChannelMessagesWithCollection/onCacheResult]', err);\n        else {\n          Logger.debug('[useGroupChannelMessagesWithCollection/onCacheResult]', 'message length:', messages.length);\n\n          updateMessages(messages, true, sdk.currentUser.userId);\n          updateUnsendMessages();\n        }\n\n        callback?.();\n      })\n      .onApiResult((err, messages) => {\n        if (err) Logger.warn('[useGroupChannelMessagesWithCollection/onApiResult]', err);\n        else {\n          Logger.debug('[useGroupChannelMessagesWithCollection/onApiResult]', 'message length:', messages.length);\n\n          updateMessages(messages, true, sdk.currentUser.userId);\n          if (!options?.startingPoint) options?.onMessagesReceived?.(messages);\n          if (sdk.isCacheEnabled) updateUnsendMessages();\n        }\n\n        collectionInitializedRef.current = true;\n        callback?.();\n      });\n  });\n\n  useChannelHandler(sdk, handlerId, {\n    onUserBanned(channel, bannedUser) {\n      if (channel.isGroupChannel() && !isDifferentChannel(channel, channel)) {\n        if (bannedUser.userId === sdk.currentUser.userId) {\n          options?.onChannelDeleted?.();\n        } else {\n          forceUpdate();\n        }\n      }\n    },\n  });\n\n  useEffect(() => {\n    // NOTE: Cache read is heavy task, and it prevents smooth ui transition\n    setTimeout(async () => {\n      updateLoading(true);\n      init(initialStartingPoint, initialLimit, () => updateLoading(false));\n    }, 0);\n  }, [channel.url, userId]);\n\n  useEffect(() => {\n    return () => {\n      if (collectionRef.current) collectionRef.current?.dispose();\n    };\n  }, []);\n\n  const refresh: ReturnType<UseGroupChannelMessages>['refresh'] = useFreshCallback(async () => {\n    updateRefreshing(true);\n    init(Number.MAX_SAFE_INTEGER, MESSAGE_LIMIT.DEFAULT, () => updateRefreshing(false));\n  });\n\n  const prev: ReturnType<UseGroupChannelMessages>['prev'] = useFreshCallback(async () => {\n    if (collectionRef.current && collectionRef.current?.hasPrevious) {\n      try {\n        const list = await collectionRef.current?.loadPrevious();\n        updateMessages(list, false, sdk.currentUser.userId);\n      } catch {}\n    }\n  });\n\n  const hasPrev: ReturnType<UseGroupChannelMessages>['hasPrev'] = useFreshCallback(() => {\n    if (collectionInitializedRef.current && collectionRef.current) {\n      return collectionRef.current.hasPrevious;\n    } else {\n      return false;\n    }\n  });\n\n  const next: ReturnType<UseGroupChannelMessages>['next'] = useFreshCallback(async () => {\n    if (collectionRef.current && collectionRef.current?.hasNext) {\n      try {\n        const fetchedList = await collectionRef.current?.loadNext();\n        updateMessages(fetchedList, false, sdk.currentUser.userId);\n      } catch {}\n    }\n  });\n\n  const hasNext: ReturnType<UseGroupChannelMessages>['hasNext'] = useFreshCallback(() => {\n    if (collectionInitializedRef.current && collectionRef.current) {\n      return collectionRef.current.hasNext;\n    } else {\n      return false;\n    }\n  });\n\n  const sendUserMessage: ReturnType<UseGroupChannelMessages>['sendUserMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendUserMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isUserMessage()) {\n              onPending?.(pendingMessage);\n              updateMessages([pendingMessage], false, sdk.currentUser.userId);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isUserMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, failedMessage) => {\n            updateMessages([failedMessage], false, sdk.currentUser.userId);\n            reject(err);\n          });\n      });\n    },\n  );\n  const sendFileMessage: ReturnType<UseGroupChannelMessages>['sendFileMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isFileMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isFileMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage as SendbirdFileMessage);\n            }\n          })\n          .onFailed((err, failedMessage) => {\n            updateMessages([failedMessage], false, sdk.currentUser.userId);\n            reject(err);\n          });\n      });\n    },\n  );\n  const updateUserMessage: ReturnType<UseGroupChannelMessages>['updateUserMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateUserMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n  );\n  const updateFileMessage: ReturnType<UseGroupChannelMessages>['updateFileMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateFileMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n  );\n  const resendMessage: ReturnType<UseGroupChannelMessages>['resendMessage'] = useFreshCallback(\n    async (failedMessage) => {\n      const resentMessage = await (() => {\n        if (failedMessage.isUserMessage()) return channel.resendUserMessage(failedMessage);\n        if (failedMessage.isFileMessage()) return channel.resendFileMessage(failedMessage);\n        return null;\n      })();\n\n      if (resentMessage) updateMessages([resentMessage], false, sdk.currentUser.userId);\n    },\n  );\n  const deleteMessage: ReturnType<UseGroupChannelMessages>['deleteMessage'] = useFreshCallback(async (message) => {\n    if (message.sendingStatus === 'succeeded') {\n      if (message.isUserMessage()) await channel.deleteMessage(message);\n      if (message.isFileMessage()) await channel.deleteMessage(message);\n    } else {\n      try {\n        await collectionRef.current?.removeFailedMessage(message.reqId);\n      } finally {\n        deleteMessages([message.messageId], [message.reqId]);\n      }\n    }\n  });\n  const resetNewMessages: ReturnType<UseGroupChannelMessages>['resetNewMessages'] = useFreshCallback(() => {\n    updateNewMessages([], true, sdk.currentUser.userId);\n  });\n  const resetWithStartingPoint: ReturnType<UseGroupChannelMessages>['resetWithStartingPoint'] = useFreshCallback(\n    (startingPoint, callback) => {\n      updateLoading(true);\n      updateMessages([], true, sdk.currentUser.userId);\n      init(startingPoint, MESSAGE_LIMIT.DEFAULT, () => {\n        updateLoading(false);\n        callback?.();\n      });\n    },\n  );\n\n  return {\n    loading,\n    refreshing,\n    refresh,\n    messages,\n    next,\n    hasNext,\n    prev,\n    hasPrev,\n    newMessages,\n    resetNewMessages,\n    sendUserMessage,\n    sendFileMessage,\n    updateUserMessage,\n    updateFileMessage,\n    resendMessage,\n    deleteMessage,\n    resetWithStartingPoint,\n    nextMessages: newMessages,\n    newMessagesFromMembers: newMessages,\n  };\n};\n"],"mappings":"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"}