{"version":3,"names":["useRef","ASYNC_NOOP","NOOP","isDifferentChannel","isMyMessage","useAsyncEffect","useForceUpdate","useFreshCallback","useUniqHandlerId","useChannelHandler","useConnectionHandler","useChannelMessagesReducer","createMessageQuery","channel","creator","createPreviousMessageListQuery","limit","reverse","useOpenChannelMessagesWithQuery","sdk","userId","options","queryRef","forceUpdate","handlerId","loading","refreshing","messages","newMessages","updateMessages","updateNewMessages","deleteNewMessages","deleteMessages","updateLoading","updateRefreshing","sortComparator","init","uid","_queryRef$current","current","queryCreator","hasNext","_queryRef$current2","list","load","currentUser","channelUpdater","isOpenChannel","onReconnectSucceeded","_queryRef$current3","_queryRef$current4","_queryRef$current5","_queryRef$current6","_queryRef$current7","_queryRef$current8","_queryRef$current9","_queryRef$current10","_queryRef$current11","_queryRef$current12","_queryRef$current13","_queryRef$current14","_queryRef$current15","_queryRef$current16","_queryRef$current17","_queryRef$current18","lastMessage","messageContext","updatedMessages","addedMessages","deletedMessageIds","changeLogsContext","hasMore","token","messageQueryContext","timestamp","createdAt","changelogsParams","replyType","includeMetaArray","includeReactions","includeThreadInfo","includeParentMessageInfo","changeLogsByTS","getMessageChangeLogsSinceTimestamp","push","changeLogsByToken","getMessageChangeLogsSinceToken","messageQueryParams","prevResultSize","nextResultSize","customTypesFilter","messageTypeFilter","senderUserIdsFilter","showSubchannelMessagesOnly","queriedMessages","getMessagesByTimestamp","length","unshift","_options$shouldCountN","shouldCountNewMessages","call","onMessagesReceived","onMessageReceived","eventChannel","message","_options$shouldCountN2","onMessageUpdated","onMessageDeleted","messageId","onChannelChanged","onChannelFrozen","onChannelUnfrozen","onChannelParticipantCountChanged","onChannelDeleted","channelUrl","type","url","_options$onChannelDel","onOperatorUpdated","onUserUnbanned","onUserMuted","onUserUnmuted","onUserBanned","bannedUser","_options$onChannelDel2","enter","error","_options$onError","_options$onChannelDel3","onError","exit","catch","refresh","prev","_queryRef$current19","_queryRef$current20","hasPrev","_queryRef$current21","next","sendUserMessage","params","onPending","Promise","resolve","reject","pendingMessage","isUserMessage","onSucceeded","sentMessage","onFailed","err","sendFileMessage","isFileMessage","updateUserMessage","updatedMessage","updateFileMessage","resendMessage","failedMessage","resendUserMessage","resendFileMessage","deleteMessage","sendingStatus","reqId","resetNewMessages","nextMessages","newMessagesFromMembers"],"sources":["useOpenChannelMessagesWithQuery.ts"],"sourcesContent":["import { useRef } from 'react';\n\nimport type {\n  SendbirdBaseChannel,\n  SendbirdBaseMessage,\n  SendbirdOpenChannel,\n  SendbirdPreviousMessageListQuery,\n} from '@sendbird/uikit-utils';\nimport {\n  ASYNC_NOOP,\n  NOOP,\n  isDifferentChannel,\n  isMyMessage,\n  useAsyncEffect,\n  useForceUpdate,\n  useFreshCallback,\n  useUniqHandlerId,\n} from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../../handler/useChannelHandler';\nimport { useConnectionHandler } from '../../handler/useConnectionHandler';\nimport type { UseOpenChannelMessages, UseOpenChannelMessagesOptions } from '../../types';\nimport { useChannelMessagesReducer } from '../useChannelMessagesReducer';\n\nconst createMessageQuery = (channel: SendbirdOpenChannel, creator?: UseOpenChannelMessagesOptions['queryCreator']) => {\n  if (creator) return creator();\n  return channel.createPreviousMessageListQuery({\n    limit: 100,\n    reverse: true,\n  });\n};\n\nexport const useOpenChannelMessagesWithQuery: UseOpenChannelMessages = (sdk, channel, userId, options) => {\n  const queryRef = useRef<SendbirdPreviousMessageListQuery>();\n  const forceUpdate = useForceUpdate();\n  const handlerId = useUniqHandlerId('useOpenChannelMessagesWithQuery');\n\n  const {\n    loading,\n    refreshing,\n    messages,\n    newMessages,\n    updateMessages,\n    updateNewMessages,\n    deleteNewMessages,\n    deleteMessages,\n    updateLoading,\n    updateRefreshing,\n  } = useChannelMessagesReducer(options?.sortComparator);\n\n  const init = useFreshCallback(async (uid?: string) => {\n    if (uid) {\n      queryRef.current = createMessageQuery(channel, options?.queryCreator);\n      if (queryRef.current?.hasNext) {\n        const list = await queryRef.current?.load();\n\n        updateMessages(list, true, sdk.currentUser.userId);\n      }\n      updateNewMessages([], true, sdk.currentUser.userId);\n    }\n  });\n\n  const channelUpdater = (channel: SendbirdBaseChannel) => {\n    if (channel.isOpenChannel() && !isDifferentChannel(channel, channel)) {\n      forceUpdate();\n    }\n  };\n\n  useConnectionHandler(sdk, handlerId, {\n    async onReconnectSucceeded() {\n      const lastMessage = messages[0];\n      if (!lastMessage) return;\n\n      const messageContext = {\n        updatedMessages: [] as SendbirdBaseMessage[],\n        addedMessages: [] as SendbirdBaseMessage[],\n        deletedMessageIds: [] as number[],\n      };\n      const changeLogsContext = {\n        hasMore: false,\n        token: '',\n      };\n      const messageQueryContext = {\n        hasMore: false,\n        timestamp: lastMessage.createdAt,\n      };\n\n      // Updated & Deleted messages\n      const changelogsParams = {\n        replyType: queryRef.current?.replyType,\n        includeMetaArray: queryRef.current?.includeMetaArray,\n        includeReactions: queryRef.current?.includeReactions,\n        includeThreadInfo: queryRef.current?.includeThreadInfo,\n        includeParentMessageInfo: queryRef.current?.includeParentMessageInfo,\n      };\n\n      const changeLogsByTS = await channel.getMessageChangeLogsSinceTimestamp(lastMessage.createdAt);\n      changeLogsContext.token = changeLogsByTS.token;\n      changeLogsContext.hasMore = changeLogsByTS.hasMore;\n      messageContext.updatedMessages.push(...changeLogsByTS.updatedMessages);\n      messageContext.deletedMessageIds.push(...changeLogsByTS.deletedMessageIds);\n\n      while (changeLogsContext.hasMore) {\n        const changeLogsByToken = await channel.getMessageChangeLogsSinceToken(changeLogsByTS.token, changelogsParams);\n        changeLogsContext.token = changeLogsByToken.token;\n        changeLogsContext.hasMore = changeLogsByToken.hasMore;\n        messageContext.updatedMessages.push(...changeLogsByToken.updatedMessages);\n        messageContext.deletedMessageIds.push(...changeLogsByToken.deletedMessageIds);\n      }\n\n      // Added messages\n      const messageQueryParams = {\n        prevResultSize: 0,\n        nextResultSize: queryRef.current?.limit ?? 100,\n        reverse: queryRef.current?.reverse,\n        includeParentMessageInfo: queryRef.current?.includeParentMessageInfo,\n        includeThreadInfo: queryRef.current?.includeThreadInfo,\n        includeReactions: queryRef.current?.includeReactions,\n        includeMetaArray: queryRef.current?.includeMetaArray,\n        replyType: queryRef.current?.replyType,\n        customTypesFilter: queryRef.current?.customTypesFilter,\n        messageTypeFilter: queryRef.current?.messageTypeFilter,\n        senderUserIdsFilter: queryRef.current?.senderUserIdsFilter,\n        showSubchannelMessagesOnly: queryRef.current?.showSubchannelMessagesOnly,\n      };\n\n      const queriedMessages = await channel.getMessagesByTimestamp(lastMessage.createdAt, messageQueryParams);\n      messageQueryContext.hasMore = queriedMessages.length > 0;\n      if (messageQueryContext.hasMore) {\n        messageQueryContext.timestamp = queriedMessages[0].createdAt;\n        messageContext.addedMessages.unshift(...queriedMessages);\n      }\n\n      while (messageQueryContext.hasMore) {\n        const queriedMessages = await channel.getMessagesByTimestamp(messageQueryContext.timestamp, messageQueryParams);\n        messageQueryContext.hasMore = queriedMessages.length > 0;\n        if (messageQueryContext.hasMore) {\n          messageQueryContext.timestamp = queriedMessages[0].createdAt;\n          messageContext.addedMessages.unshift(...queriedMessages);\n        }\n      }\n\n      // Update to View\n      updateMessages(\n        [...messageContext.addedMessages, ...messageContext.updatedMessages],\n        false,\n        sdk.currentUser.userId,\n      );\n      deleteMessages(messageContext.deletedMessageIds, []);\n\n      if (messageContext.addedMessages.length > 0) {\n        if (options?.shouldCountNewMessages?.()) {\n          updateNewMessages(messageContext.addedMessages, false, sdk.currentUser.userId);\n        }\n        if (options?.onMessagesReceived) {\n          options.onMessagesReceived(messageContext.addedMessages);\n        }\n      }\n    },\n  });\n\n  useChannelHandler(\n    sdk,\n    handlerId,\n    {\n      // Messages\n      onMessageReceived(eventChannel, message) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n        if (isMyMessage(message, sdk.currentUser.userId)) return;\n\n        updateMessages([message], false, sdk.currentUser.userId);\n        if (options?.shouldCountNewMessages?.()) {\n          updateNewMessages([message], false, sdk.currentUser.userId);\n        }\n        if (options?.onMessagesReceived) {\n          options.onMessagesReceived([message]);\n        }\n      },\n      onMessageUpdated(eventChannel, message) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n        if (isMyMessage(message, sdk.currentUser.userId)) return;\n\n        updateMessages([message], false, sdk.currentUser.userId);\n      },\n      onMessageDeleted(eventChannel, messageId) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n        deleteMessages([messageId], []);\n        deleteNewMessages([messageId], []);\n      },\n      // Channels\n      onChannelChanged: channelUpdater,\n      onChannelFrozen: channelUpdater,\n      onChannelUnfrozen: channelUpdater,\n      onChannelParticipantCountChanged(eventChannel) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n        channelUpdater(eventChannel);\n      },\n      onChannelDeleted(channelUrl, type) {\n        if (channel.url === channelUrl && type === 'open') {\n          options?.onChannelDeleted?.();\n        }\n      },\n      // Users\n      onOperatorUpdated: channelUpdater,\n      onUserUnbanned: channelUpdater,\n      onUserMuted: channelUpdater,\n      onUserUnmuted: channelUpdater,\n      onUserBanned(eventChannel, bannedUser) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n\n        if (bannedUser.userId === sdk.currentUser.userId) {\n          options?.onChannelDeleted?.();\n        } else {\n          channelUpdater(eventChannel);\n        }\n      },\n    },\n    'open',\n  );\n\n  useAsyncEffect(async () => {\n    updateLoading(true);\n\n    try {\n      await channel.enter();\n      await init(userId);\n    } catch (error) {\n      options?.onError?.(error);\n      options?.onChannelDeleted?.();\n    } finally {\n      updateLoading(false);\n    }\n\n    return () => {\n      channel.exit().catch(NOOP);\n    };\n  }, [channel.url, userId]);\n\n  const refresh: ReturnType<UseOpenChannelMessages>['refresh'] = useFreshCallback(async () => {\n    updateRefreshing(true);\n    await init(userId);\n    updateRefreshing(false);\n  });\n\n  const prev: ReturnType<UseOpenChannelMessages>['prev'] = useFreshCallback(async () => {\n    if (queryRef.current && queryRef.current?.hasNext) {\n      const list = await queryRef.current?.load();\n      updateMessages(list, false, sdk.currentUser.userId);\n    }\n  });\n  const hasPrev: ReturnType<UseOpenChannelMessages>['hasPrev'] = useFreshCallback(\n    () => queryRef.current?.hasNext ?? false,\n  );\n\n  const next: ReturnType<UseOpenChannelMessages>['next'] = useFreshCallback(ASYNC_NOOP);\n  const hasNext: ReturnType<UseOpenChannelMessages>['hasNext'] = useFreshCallback(() => false);\n\n  const sendUserMessage: ReturnType<UseOpenChannelMessages>['sendUserMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendUserMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isUserMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isUserMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, sentMessage) => {\n            updateMessages([sentMessage], false, sdk.currentUser.userId);\n            reject(err);\n          });\n      });\n    },\n  );\n\n  const sendFileMessage: ReturnType<UseOpenChannelMessages>['sendFileMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isFileMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isFileMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, sentMessage) => {\n            updateMessages([sentMessage], false, sdk.currentUser.userId);\n            reject(err);\n          });\n      });\n    },\n  );\n\n  const updateUserMessage: ReturnType<UseOpenChannelMessages>['updateUserMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateUserMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n  );\n  const updateFileMessage: ReturnType<UseOpenChannelMessages>['updateFileMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateFileMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n  );\n  const resendMessage: ReturnType<UseOpenChannelMessages>['resendMessage'] = useFreshCallback(async (failedMessage) => {\n    const message = await (() => {\n      if (failedMessage.isUserMessage()) return channel.resendUserMessage(failedMessage);\n      if (failedMessage.isFileMessage()) return channel.resendFileMessage(failedMessage);\n      return null;\n    })();\n\n    if (message) updateMessages([message], false, sdk.currentUser.userId);\n  });\n  const deleteMessage: ReturnType<UseOpenChannelMessages>['deleteMessage'] = useFreshCallback(async (message) => {\n    if (message.sendingStatus === 'succeeded') {\n      if (message.isUserMessage()) await channel.deleteMessage(message);\n      if (message.isFileMessage()) await channel.deleteMessage(message);\n    } else {\n      deleteMessages([message.messageId], [message.reqId]);\n    }\n  });\n  const resetNewMessages: ReturnType<UseOpenChannelMessages>['resetNewMessages'] = useFreshCallback(() => {\n    updateNewMessages([], true, sdk.currentUser.userId);\n  });\n\n  return {\n    loading,\n    refreshing,\n    refresh,\n    messages,\n    newMessages,\n    next,\n    hasNext,\n    prev,\n    hasPrev,\n    sendUserMessage,\n    sendFileMessage,\n    updateUserMessage,\n    updateFileMessage,\n    resendMessage,\n    deleteMessage,\n    resetNewMessages,\n\n    nextMessages: newMessages,\n    newMessagesFromMembers: newMessages,\n  };\n};\n"],"mappings":"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"}