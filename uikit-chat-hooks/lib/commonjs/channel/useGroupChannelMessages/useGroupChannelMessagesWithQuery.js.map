{"version":3,"names":["_react","require","_uikitUtils","_useChannelHandler","_useChannelMessagesReducer","createMessageQuery","channel","creator","createPreviousMessageListQuery","limit","reverse","useGroupChannelMessagesWithQuery","sdk","userId","options","queryRef","useRef","handlerId","useUniqHandlerId","forceUpdate","useForceUpdate","loading","refreshing","messages","newMessages","updateMessages","deleteMessages","updateNewMessages","deleteNewMessages","updateLoading","updateRefreshing","useChannelMessagesReducer","sortComparator","channelMarkAsRead","confirmAndMarkAsRead","e","Logger","warn","init","useFreshCallback","uid","_queryRef$current","currentUser","current","queryCreator","hasNext","_queryRef$current2","list","load","channelUpdater","isGroupChannel","isDifferentChannel","useChannelHandler","onMessageReceived","eventChannel","message","_options$shouldCountN","isMyMessage","shouldCountNewMessages","call","onMessagesReceived","onMessageUpdated","onMessageDeleted","messageId","onReactionUpdated","reactionEvent","getMessage","includeReactions","includeParentMessageInfo","includeThreadInfo","includeMetaArray","channelUrl","url","channelType","onChannelChanged","onChannelFrozen","onChannelUnfrozen","onChannelHidden","onChannelMemberCountChanged","channels","foundChannel","find","c","onChannelDeleted","_options$onChannelDel","onOperatorUpdated","onUserLeft","onUserJoined","onUserUnbanned","onUserMuted","onUserUnmuted","onUserBanned","bannedUser","_options$onChannelDel2","useAsyncEffect","refresh","prev","_queryRef$current3","_queryRef$current4","hasPrev","_queryRef$current5","next","ASYNC_NOOP","sendUserMessage","params","onPending","Promise","resolve","reject","pendingMessage","isUserMessage","onSucceeded","sentMessage","onFailed","err","sendFileMessage","isFileMessage","updateUserMessage","updatedMessage","updateFileMessage","resendMessage","failedMessage","resendUserMessage","resendFileMessage","deleteMessage","sendingStatus","reqId","resetNewMessages","resetWithStartingPoint","nextMessages","newMessagesFromMembers","exports"],"sources":["useGroupChannelMessagesWithQuery.ts"],"sourcesContent":["import { useRef } from 'react';\n\nimport type {\n  SendbirdBaseChannel,\n  SendbirdGroupChannel,\n  SendbirdPreviousMessageListQuery,\n} from '@sendbird/uikit-utils';\nimport {\n  ASYNC_NOOP,\n  Logger,\n  confirmAndMarkAsRead,\n  isDifferentChannel,\n  isMyMessage,\n  useAsyncEffect,\n  useForceUpdate,\n  useFreshCallback,\n  useUniqHandlerId,\n} from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../../handler/useChannelHandler';\nimport type { UseGroupChannelMessages, UseGroupChannelMessagesOptions } from '../../types';\nimport { useChannelMessagesReducer } from '../useChannelMessagesReducer';\n\nconst createMessageQuery = (\n  channel: SendbirdGroupChannel,\n  creator?: UseGroupChannelMessagesOptions['queryCreator'],\n) => {\n  if (creator) return creator();\n  return channel.createPreviousMessageListQuery({\n    limit: 100,\n    reverse: true,\n  });\n};\n\nexport const useGroupChannelMessagesWithQuery: UseGroupChannelMessages = (sdk, channel, userId, options) => {\n  const queryRef = useRef<SendbirdPreviousMessageListQuery>();\n  const handlerId = useUniqHandlerId('useGroupChannelMessagesWithQuery');\n\n  const forceUpdate = useForceUpdate();\n\n  const {\n    loading,\n    refreshing,\n    messages,\n    newMessages,\n    updateMessages,\n    deleteMessages,\n    updateNewMessages,\n    deleteNewMessages,\n    updateLoading,\n    updateRefreshing,\n  } = useChannelMessagesReducer(options?.sortComparator);\n\n  const channelMarkAsRead = async () => {\n    try {\n      await confirmAndMarkAsRead([channel]);\n    } catch (e) {\n      Logger.warn('[useGroupChannelMessagesWithQuery/channelMarkAsRead]', e);\n    }\n  };\n\n  const init = useFreshCallback(async (uid?: string) => {\n    if (uid) {\n      channelMarkAsRead();\n      updateNewMessages([], true, sdk.currentUser.userId);\n\n      queryRef.current = createMessageQuery(channel, options?.queryCreator);\n      if (queryRef.current?.hasNext) {\n        const list = await queryRef.current?.load();\n        updateMessages(list, true, sdk.currentUser.userId);\n      }\n    }\n  });\n\n  const channelUpdater = (channel: SendbirdBaseChannel) => {\n    if (channel.isGroupChannel() && !isDifferentChannel(channel, channel)) {\n      forceUpdate();\n    }\n  };\n\n  useChannelHandler(sdk, handlerId, {\n    // Messages\n    onMessageReceived(eventChannel, message) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      if (isMyMessage(message, sdk.currentUser.userId)) return;\n\n      channelMarkAsRead();\n\n      updateMessages([message], false, sdk.currentUser.userId);\n      if (options?.shouldCountNewMessages?.()) {\n        updateNewMessages([message], false, sdk.currentUser.userId);\n      }\n      if (options?.onMessagesReceived) {\n        options.onMessagesReceived([message]);\n      }\n    },\n    onMessageUpdated(eventChannel, message) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      if (isMyMessage(message, sdk.currentUser.userId)) return;\n\n      updateMessages([message], false, sdk.currentUser.userId);\n    },\n    onMessageDeleted(eventChannel, messageId) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      deleteMessages([messageId], []);\n      deleteNewMessages([messageId], []);\n    },\n    async onReactionUpdated(eventChannel, reactionEvent) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n\n      const message = await sdk.message.getMessage({\n        messageId: reactionEvent.messageId,\n        includeReactions: true,\n        includeParentMessageInfo: true,\n        includeThreadInfo: true,\n        includeMetaArray: true,\n        channelUrl: channel.url,\n        channelType: channel.channelType,\n      });\n      updateMessages([message], false, sdk.currentUser.userId);\n    },\n    // Channels\n    onChannelChanged: channelUpdater,\n    onChannelFrozen: channelUpdater,\n    onChannelUnfrozen: channelUpdater,\n    onChannelHidden: channelUpdater,\n    onChannelMemberCountChanged(channels) {\n      const foundChannel = channels.find((c) => !isDifferentChannel(c, channel));\n      if (foundChannel) channelUpdater(foundChannel);\n    },\n    onChannelDeleted(channelUrl: string) {\n      if (channel.url === channelUrl) options?.onChannelDeleted?.();\n    },\n    // Users\n    onOperatorUpdated: channelUpdater,\n    onUserLeft: channelUpdater,\n    // onUserEntered: channelUpdater,\n    // onUserExited: channelUpdater,\n    onUserJoined: channelUpdater,\n    onUserUnbanned: channelUpdater,\n    onUserMuted: channelUpdater,\n    onUserUnmuted: channelUpdater,\n    onUserBanned(eventChannel, bannedUser) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n\n      if (bannedUser.userId === sdk.currentUser.userId) {\n        options?.onChannelDeleted?.();\n      } else {\n        channelUpdater(eventChannel);\n      }\n    },\n  });\n\n  useAsyncEffect(async () => {\n    updateLoading(true);\n    await init(userId);\n    updateLoading(false);\n  }, [channel.url, userId]);\n\n  const refresh: ReturnType<UseGroupChannelMessages>['refresh'] = useFreshCallback(async () => {\n    updateRefreshing(true);\n    await init(userId);\n    updateRefreshing(false);\n  });\n\n  const prev: ReturnType<UseGroupChannelMessages>['prev'] = useFreshCallback(async () => {\n    if (queryRef.current && queryRef.current?.hasNext) {\n      const list = await queryRef.current?.load();\n      updateMessages(list, false, sdk.currentUser.userId);\n    }\n  });\n  const hasPrev: ReturnType<UseGroupChannelMessages>['hasPrev'] = useFreshCallback(\n    () => queryRef.current?.hasNext ?? false,\n  );\n\n  const next: ReturnType<UseGroupChannelMessages>['next'] = useFreshCallback(ASYNC_NOOP);\n  const hasNext: ReturnType<UseGroupChannelMessages>['hasNext'] = useFreshCallback(() => false);\n\n  const sendUserMessage: ReturnType<UseGroupChannelMessages>['sendUserMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendUserMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isUserMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isUserMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, sentMessage) => {\n            updateMessages([sentMessage], false, sdk.currentUser.userId);\n            reject(err);\n          });\n      });\n    },\n  );\n  const sendFileMessage: ReturnType<UseGroupChannelMessages>['sendFileMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isFileMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isFileMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, sentMessage) => {\n            updateMessages([sentMessage], false, sdk.currentUser.userId);\n            reject(err);\n          });\n      });\n    },\n  );\n  const updateUserMessage: ReturnType<UseGroupChannelMessages>['updateUserMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateUserMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n  );\n  const updateFileMessage: ReturnType<UseGroupChannelMessages>['updateFileMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateFileMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n  );\n  const resendMessage: ReturnType<UseGroupChannelMessages>['resendMessage'] = useFreshCallback(\n    async (failedMessage) => {\n      const message = await (() => {\n        if (failedMessage.isUserMessage()) return channel.resendUserMessage(failedMessage);\n        if (failedMessage.isFileMessage()) return channel.resendFileMessage(failedMessage);\n        return null;\n      })();\n\n      if (message) updateMessages([message], false, sdk.currentUser.userId);\n    },\n  );\n  const deleteMessage: ReturnType<UseGroupChannelMessages>['deleteMessage'] = useFreshCallback(async (message) => {\n    if (message.sendingStatus === 'succeeded') {\n      if (message.isUserMessage()) await channel.deleteMessage(message);\n      if (message.isFileMessage()) await channel.deleteMessage(message);\n    } else {\n      deleteMessages([message.messageId], [message.reqId]);\n    }\n  });\n  const resetNewMessages: ReturnType<UseGroupChannelMessages>['resetNewMessages'] = useFreshCallback(() => {\n    updateNewMessages([], true, sdk.currentUser.userId);\n  });\n\n  return {\n    loading,\n    refreshing,\n    refresh,\n    messages,\n    newMessages,\n    resetNewMessages,\n    next,\n    hasNext,\n    prev,\n    hasPrev,\n    sendUserMessage,\n    sendFileMessage,\n    updateUserMessage,\n    updateFileMessage,\n    resendMessage,\n    deleteMessage,\n    resetWithStartingPoint() {\n      Logger.warn('resetWithStartingPoint is not supported in Query, please use Collection instead.');\n    },\n\n    nextMessages: newMessages,\n    newMessagesFromMembers: newMessages,\n  };\n};\n"],"mappings":"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"}