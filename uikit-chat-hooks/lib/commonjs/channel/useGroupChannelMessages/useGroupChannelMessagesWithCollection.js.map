{"version":3,"names":["_react","require","_groupChannel","_uikitUtils","_useChannelHandler","_useChannelMessagesReducer","MESSAGE_LIMIT","DEFAULT","SEARCH","createMessageCollection","channel","limit","options","collectionCreator","startingPoint","filter","MessageFilter","isNotEmpty","arr","length","useGroupChannelMessagesWithCollection","sdk","userId","initialStartingPoint","Number","MAX_SAFE_INTEGER","initialLimit","forceUpdate","useForceUpdate","collectionRef","useRef","collectionInitializedRef","handlerId","useUniqHandlerId","loading","refreshing","messages","newMessages","updateMessages","updateNewMessages","deleteNewMessages","deleteMessages","updateLoading","updateRefreshing","useChannelMessagesReducer","sortComparator","channelMarkAsRead","source","MessageEventSource","EVENT_MESSAGE_RECEIVED","EVENT_MESSAGE_SENT_SUCCESS","SYNC_MESSAGE_FILL","undefined","confirmAndMarkAsRead","e","Logger","warn","updateUnsendMessages","pendingMessages","failedMessages","current","currentUser","init","useFreshCallback","callback","_collectionRef$curren","_collectionRef$curren2","dispose","setMessageCollectionHandler","onMessagesAdded","_","__","incomingMessages","it","EVENT_MESSAGE_SENT_PENDING","EVENT_MESSAGE_SENT_FAILED","isMyMessage","_options$shouldCountN","shouldCountNewMessages","call","_options$onMessagesRe","onMessagesReceived","onMessagesUpdated","EVENT_MESSAGE_UPDATED","_options$shouldCountN2","onMessagesDeleted","messageIds","onChannelDeleted","_options$onChannelDel","onChannelUpdated","eventChannel","isGroupChannel","isDifferentChannel","onHugeGapDetected","initialize","MessageCollectionInitPolicy","CACHE_AND_REPLACE_BY_API","onCacheResult","err","isCacheEnabled","error","debug","onApiResult","_options$onMessagesRe2","useChannelHandler","onUserBanned","bannedUser","_options$onChannelDel2","useEffect","setTimeout","url","_collectionRef$curren3","refresh","prev","_collectionRef$curren4","hasPrevious","_collectionRef$curren5","list","loadPrevious","hasPrev","next","_collectionRef$curren6","hasNext","_collectionRef$curren7","fetchedList","loadNext","sendUserMessage","params","onPending","Promise","resolve","reject","pendingMessage","isUserMessage","onSucceeded","sentMessage","onFailed","failedMessage","sendFileMessage","isFileMessage","updateUserMessage","messageId","updatedMessage","updateFileMessage","resendMessage","resentMessage","resendUserMessage","resendFileMessage","deleteMessage","message","sendingStatus","_collectionRef$curren8","removeFailedMessage","reqId","resetNewMessages","resetWithStartingPoint","nextMessages","newMessagesFromMembers","exports"],"sources":["useGroupChannelMessagesWithCollection.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { MessageCollectionInitPolicy, MessageEventSource, MessageFilter } from '@sendbird/chat/groupChannel';\nimport type { SendbirdFileMessage, SendbirdGroupChannel, SendbirdMessageCollection } from '@sendbird/uikit-utils';\nimport {\n  Logger,\n  confirmAndMarkAsRead,\n  isDifferentChannel,\n  isMyMessage,\n  useForceUpdate,\n  useFreshCallback,\n  useUniqHandlerId,\n} from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../../handler/useChannelHandler';\nimport type { UseGroupChannelMessages, UseGroupChannelMessagesOptions } from '../../types';\nimport { useChannelMessagesReducer } from '../useChannelMessagesReducer';\n\nconst MESSAGE_LIMIT = {\n  DEFAULT: 50,\n  SEARCH: 20,\n};\n\nconst createMessageCollection = (\n  channel: SendbirdGroupChannel,\n  limit: number,\n  options?: UseGroupChannelMessagesOptions,\n) => {\n  if (options?.collectionCreator) return options?.collectionCreator({ startingPoint: options?.startingPoint });\n  const filter = new MessageFilter();\n  return channel.createMessageCollection({ filter, limit, startingPoint: options?.startingPoint });\n};\n\nfunction isNotEmpty(arr?: unknown[]): arr is unknown[] {\n  if (!arr) return false;\n  return arr.length !== 0;\n}\n\nexport const useGroupChannelMessagesWithCollection: UseGroupChannelMessages = (sdk, channel, userId, options) => {\n  const initialStartingPoint = options?.startingPoint ?? Number.MAX_SAFE_INTEGER;\n  const initialLimit = typeof options?.startingPoint === 'number' ? MESSAGE_LIMIT.SEARCH : MESSAGE_LIMIT.DEFAULT;\n\n  const forceUpdate = useForceUpdate();\n  const collectionRef = useRef<SendbirdMessageCollection>();\n  const collectionInitializedRef = useRef(false);\n  const handlerId = useUniqHandlerId('useGroupChannelMessagesWithCollection');\n\n  const {\n    loading,\n    refreshing,\n    messages,\n    newMessages,\n    updateMessages,\n    updateNewMessages,\n    deleteNewMessages,\n    deleteMessages,\n    updateLoading,\n    updateRefreshing,\n  } = useChannelMessagesReducer(options?.sortComparator);\n\n  const channelMarkAsRead = async (source?: MessageEventSource) => {\n    try {\n      switch (source) {\n        case MessageEventSource.EVENT_MESSAGE_RECEIVED:\n        case MessageEventSource.EVENT_MESSAGE_SENT_SUCCESS:\n        case MessageEventSource.SYNC_MESSAGE_FILL:\n        case undefined:\n          await confirmAndMarkAsRead([channel]);\n          break;\n      }\n    } catch (e) {\n      Logger.warn('[useGroupChannelMessagesWithCollection/channelMarkAsRead]', e);\n    }\n  };\n\n  const updateUnsendMessages = () => {\n    const { pendingMessages, failedMessages } = collectionRef.current ?? {};\n    if (isNotEmpty(pendingMessages)) updateMessages(pendingMessages, false, sdk.currentUser.userId);\n    if (isNotEmpty(failedMessages)) updateMessages(failedMessages, false, sdk.currentUser.userId);\n  };\n\n  const init = useFreshCallback(async (startingPoint: number, limit: number, callback?: () => void) => {\n    if (collectionRef.current) collectionRef.current?.dispose();\n\n    channelMarkAsRead();\n    updateNewMessages([], true, sdk.currentUser.userId);\n\n    collectionInitializedRef.current = false;\n    collectionRef.current = createMessageCollection(channel, limit, {\n      collectionCreator: options?.collectionCreator,\n      startingPoint,\n    });\n\n    collectionRef.current?.setMessageCollectionHandler({\n      onMessagesAdded: (_, __, messages) => {\n        channelMarkAsRead(_.source);\n\n        const incomingMessages = messages.filter((it) => {\n          switch (_.source) {\n            case MessageEventSource.EVENT_MESSAGE_SENT_PENDING:\n            case MessageEventSource.EVENT_MESSAGE_SENT_SUCCESS:\n            case MessageEventSource.EVENT_MESSAGE_SENT_FAILED:\n              return !isMyMessage(it, sdk.currentUser.userId);\n            default:\n              return true;\n          }\n        });\n\n        if (incomingMessages.length > 0) {\n          updateMessages(incomingMessages, false, sdk.currentUser.userId);\n\n          if (options?.shouldCountNewMessages?.()) {\n            updateNewMessages(incomingMessages, false, sdk.currentUser.userId);\n          }\n\n          switch (_.source) {\n            case MessageEventSource.EVENT_MESSAGE_RECEIVED:\n            case MessageEventSource.SYNC_MESSAGE_FILL: {\n              options?.onMessagesReceived?.(incomingMessages);\n            }\n          }\n        }\n      },\n      onMessagesUpdated: (_, __, messages) => {\n        channelMarkAsRead(_.source);\n\n        const incomingMessages = messages.filter((it) => {\n          switch (_.source) {\n            case MessageEventSource.EVENT_MESSAGE_UPDATED:\n              return !isMyMessage(it, sdk.currentUser.userId);\n            default:\n              return true;\n          }\n        });\n\n        if (incomingMessages.length > 0) {\n          // NOTE: admin message is not added via onMessagesAdded handler, not checked yet is this a bug.\n          updateMessages(messages, false, sdk.currentUser.userId);\n\n          if (options?.shouldCountNewMessages?.()) {\n            if (_.source === MessageEventSource.EVENT_MESSAGE_RECEIVED) {\n              updateNewMessages(messages, false, sdk.currentUser.userId);\n            }\n          }\n        }\n      },\n      onMessagesDeleted: (_, __, messageIds) => {\n        deleteMessages(messageIds, []);\n        deleteNewMessages(messageIds, []);\n      },\n      onChannelDeleted: () => {\n        options?.onChannelDeleted?.();\n      },\n      onChannelUpdated: (_, eventChannel) => {\n        if (eventChannel.isGroupChannel() && !isDifferentChannel(eventChannel, channel)) {\n          forceUpdate();\n        }\n      },\n      onHugeGapDetected: () => {\n        init(Number.MAX_SAFE_INTEGER, MESSAGE_LIMIT.DEFAULT);\n      },\n    });\n\n    collectionRef.current\n      .initialize(MessageCollectionInitPolicy.CACHE_AND_REPLACE_BY_API)\n      .onCacheResult((err, messages) => {\n        if (err) sdk.isCacheEnabled && Logger.error('[useGroupChannelMessagesWithCollection/onCacheResult]', err);\n        else {\n          Logger.debug('[useGroupChannelMessagesWithCollection/onCacheResult]', 'message length:', messages.length);\n\n          updateMessages(messages, true, sdk.currentUser.userId);\n          updateUnsendMessages();\n        }\n\n        callback?.();\n      })\n      .onApiResult((err, messages) => {\n        if (err) Logger.warn('[useGroupChannelMessagesWithCollection/onApiResult]', err);\n        else {\n          Logger.debug('[useGroupChannelMessagesWithCollection/onApiResult]', 'message length:', messages.length);\n\n          updateMessages(messages, true, sdk.currentUser.userId);\n          if (!options?.startingPoint) options?.onMessagesReceived?.(messages);\n          if (sdk.isCacheEnabled) updateUnsendMessages();\n        }\n\n        collectionInitializedRef.current = true;\n        callback?.();\n      });\n  });\n\n  useChannelHandler(sdk, handlerId, {\n    onUserBanned(channel, bannedUser) {\n      if (channel.isGroupChannel() && !isDifferentChannel(channel, channel)) {\n        if (bannedUser.userId === sdk.currentUser.userId) {\n          options?.onChannelDeleted?.();\n        } else {\n          forceUpdate();\n        }\n      }\n    },\n  });\n\n  useEffect(() => {\n    // NOTE: Cache read is heavy task, and it prevents smooth ui transition\n    setTimeout(async () => {\n      updateLoading(true);\n      init(initialStartingPoint, initialLimit, () => updateLoading(false));\n    }, 0);\n  }, [channel.url, userId]);\n\n  useEffect(() => {\n    return () => {\n      if (collectionRef.current) collectionRef.current?.dispose();\n    };\n  }, []);\n\n  const refresh: ReturnType<UseGroupChannelMessages>['refresh'] = useFreshCallback(async () => {\n    updateRefreshing(true);\n    init(Number.MAX_SAFE_INTEGER, MESSAGE_LIMIT.DEFAULT, () => updateRefreshing(false));\n  });\n\n  const prev: ReturnType<UseGroupChannelMessages>['prev'] = useFreshCallback(async () => {\n    if (collectionRef.current && collectionRef.current?.hasPrevious) {\n      try {\n        const list = await collectionRef.current?.loadPrevious();\n        updateMessages(list, false, sdk.currentUser.userId);\n      } catch {}\n    }\n  });\n\n  const hasPrev: ReturnType<UseGroupChannelMessages>['hasPrev'] = useFreshCallback(() => {\n    if (collectionInitializedRef.current && collectionRef.current) {\n      return collectionRef.current.hasPrevious;\n    } else {\n      return false;\n    }\n  });\n\n  const next: ReturnType<UseGroupChannelMessages>['next'] = useFreshCallback(async () => {\n    if (collectionRef.current && collectionRef.current?.hasNext) {\n      try {\n        const fetchedList = await collectionRef.current?.loadNext();\n        updateMessages(fetchedList, false, sdk.currentUser.userId);\n      } catch {}\n    }\n  });\n\n  const hasNext: ReturnType<UseGroupChannelMessages>['hasNext'] = useFreshCallback(() => {\n    if (collectionInitializedRef.current && collectionRef.current) {\n      return collectionRef.current.hasNext;\n    } else {\n      return false;\n    }\n  });\n\n  const sendUserMessage: ReturnType<UseGroupChannelMessages>['sendUserMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendUserMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isUserMessage()) {\n              onPending?.(pendingMessage);\n              updateMessages([pendingMessage], false, sdk.currentUser.userId);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isUserMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, failedMessage) => {\n            updateMessages([failedMessage], false, sdk.currentUser.userId);\n            reject(err);\n          });\n      });\n    },\n  );\n  const sendFileMessage: ReturnType<UseGroupChannelMessages>['sendFileMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isFileMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isFileMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage as SendbirdFileMessage);\n            }\n          })\n          .onFailed((err, failedMessage) => {\n            updateMessages([failedMessage], false, sdk.currentUser.userId);\n            reject(err);\n          });\n      });\n    },\n  );\n  const updateUserMessage: ReturnType<UseGroupChannelMessages>['updateUserMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateUserMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n  );\n  const updateFileMessage: ReturnType<UseGroupChannelMessages>['updateFileMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateFileMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n  );\n  const resendMessage: ReturnType<UseGroupChannelMessages>['resendMessage'] = useFreshCallback(\n    async (failedMessage) => {\n      const resentMessage = await (() => {\n        if (failedMessage.isUserMessage()) return channel.resendUserMessage(failedMessage);\n        if (failedMessage.isFileMessage()) return channel.resendFileMessage(failedMessage);\n        return null;\n      })();\n\n      if (resentMessage) updateMessages([resentMessage], false, sdk.currentUser.userId);\n    },\n  );\n  const deleteMessage: ReturnType<UseGroupChannelMessages>['deleteMessage'] = useFreshCallback(async (message) => {\n    if (message.sendingStatus === 'succeeded') {\n      if (message.isUserMessage()) await channel.deleteMessage(message);\n      if (message.isFileMessage()) await channel.deleteMessage(message);\n    } else {\n      try {\n        await collectionRef.current?.removeFailedMessage(message.reqId);\n      } finally {\n        deleteMessages([message.messageId], [message.reqId]);\n      }\n    }\n  });\n  const resetNewMessages: ReturnType<UseGroupChannelMessages>['resetNewMessages'] = useFreshCallback(() => {\n    updateNewMessages([], true, sdk.currentUser.userId);\n  });\n  const resetWithStartingPoint: ReturnType<UseGroupChannelMessages>['resetWithStartingPoint'] = useFreshCallback(\n    (startingPoint, callback) => {\n      updateLoading(true);\n      updateMessages([], true, sdk.currentUser.userId);\n      init(startingPoint, MESSAGE_LIMIT.DEFAULT, () => {\n        updateLoading(false);\n        callback?.();\n      });\n    },\n  );\n\n  return {\n    loading,\n    refreshing,\n    refresh,\n    messages,\n    next,\n    hasNext,\n    prev,\n    hasPrev,\n    newMessages,\n    resetNewMessages,\n    sendUserMessage,\n    sendFileMessage,\n    updateUserMessage,\n    updateFileMessage,\n    resendMessage,\n    deleteMessage,\n    resetWithStartingPoint,\n    nextMessages: newMessages,\n    newMessagesFromMembers: newMessages,\n  };\n};\n"],"mappings":"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"}