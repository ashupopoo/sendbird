{"version":3,"names":["_react","require","_uikitUtils","_useChannelHandler","_useConnectionHandler","_useChannelMessagesReducer","createMessageQuery","channel","creator","createPreviousMessageListQuery","limit","reverse","useOpenChannelMessagesWithQuery","sdk","userId","options","queryRef","useRef","forceUpdate","useForceUpdate","handlerId","useUniqHandlerId","loading","refreshing","messages","newMessages","updateMessages","updateNewMessages","deleteNewMessages","deleteMessages","updateLoading","updateRefreshing","useChannelMessagesReducer","sortComparator","init","useFreshCallback","uid","_queryRef$current","current","queryCreator","hasNext","_queryRef$current2","list","load","currentUser","channelUpdater","isOpenChannel","isDifferentChannel","useConnectionHandler","onReconnectSucceeded","_queryRef$current3","_queryRef$current4","_queryRef$current5","_queryRef$current6","_queryRef$current7","_queryRef$current8","_queryRef$current9","_queryRef$current10","_queryRef$current11","_queryRef$current12","_queryRef$current13","_queryRef$current14","_queryRef$current15","_queryRef$current16","_queryRef$current17","_queryRef$current18","lastMessage","messageContext","updatedMessages","addedMessages","deletedMessageIds","changeLogsContext","hasMore","token","messageQueryContext","timestamp","createdAt","changelogsParams","replyType","includeMetaArray","includeReactions","includeThreadInfo","includeParentMessageInfo","changeLogsByTS","getMessageChangeLogsSinceTimestamp","push","changeLogsByToken","getMessageChangeLogsSinceToken","messageQueryParams","prevResultSize","nextResultSize","customTypesFilter","messageTypeFilter","senderUserIdsFilter","showSubchannelMessagesOnly","queriedMessages","getMessagesByTimestamp","length","unshift","_options$shouldCountN","shouldCountNewMessages","call","onMessagesReceived","useChannelHandler","onMessageReceived","eventChannel","message","_options$shouldCountN2","isMyMessage","onMessageUpdated","onMessageDeleted","messageId","onChannelChanged","onChannelFrozen","onChannelUnfrozen","onChannelParticipantCountChanged","onChannelDeleted","channelUrl","type","url","_options$onChannelDel","onOperatorUpdated","onUserUnbanned","onUserMuted","onUserUnmuted","onUserBanned","bannedUser","_options$onChannelDel2","useAsyncEffect","enter","error","_options$onError","_options$onChannelDel3","onError","exit","catch","NOOP","refresh","prev","_queryRef$current19","_queryRef$current20","hasPrev","_queryRef$current21","next","ASYNC_NOOP","sendUserMessage","params","onPending","Promise","resolve","reject","pendingMessage","isUserMessage","onSucceeded","sentMessage","onFailed","err","sendFileMessage","isFileMessage","updateUserMessage","updatedMessage","updateFileMessage","resendMessage","failedMessage","resendUserMessage","resendFileMessage","deleteMessage","sendingStatus","reqId","resetNewMessages","nextMessages","newMessagesFromMembers","exports"],"sources":["useOpenChannelMessagesWithQuery.ts"],"sourcesContent":["import { useRef } from 'react';\n\nimport type {\n  SendbirdBaseChannel,\n  SendbirdBaseMessage,\n  SendbirdOpenChannel,\n  SendbirdPreviousMessageListQuery,\n} from '@sendbird/uikit-utils';\nimport {\n  ASYNC_NOOP,\n  NOOP,\n  isDifferentChannel,\n  isMyMessage,\n  useAsyncEffect,\n  useForceUpdate,\n  useFreshCallback,\n  useUniqHandlerId,\n} from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../../handler/useChannelHandler';\nimport { useConnectionHandler } from '../../handler/useConnectionHandler';\nimport type { UseOpenChannelMessages, UseOpenChannelMessagesOptions } from '../../types';\nimport { useChannelMessagesReducer } from '../useChannelMessagesReducer';\n\nconst createMessageQuery = (channel: SendbirdOpenChannel, creator?: UseOpenChannelMessagesOptions['queryCreator']) => {\n  if (creator) return creator();\n  return channel.createPreviousMessageListQuery({\n    limit: 100,\n    reverse: true,\n  });\n};\n\nexport const useOpenChannelMessagesWithQuery: UseOpenChannelMessages = (sdk, channel, userId, options) => {\n  const queryRef = useRef<SendbirdPreviousMessageListQuery>();\n  const forceUpdate = useForceUpdate();\n  const handlerId = useUniqHandlerId('useOpenChannelMessagesWithQuery');\n\n  const {\n    loading,\n    refreshing,\n    messages,\n    newMessages,\n    updateMessages,\n    updateNewMessages,\n    deleteNewMessages,\n    deleteMessages,\n    updateLoading,\n    updateRefreshing,\n  } = useChannelMessagesReducer(options?.sortComparator);\n\n  const init = useFreshCallback(async (uid?: string) => {\n    if (uid) {\n      queryRef.current = createMessageQuery(channel, options?.queryCreator);\n      if (queryRef.current?.hasNext) {\n        const list = await queryRef.current?.load();\n\n        updateMessages(list, true, sdk.currentUser.userId);\n      }\n      updateNewMessages([], true, sdk.currentUser.userId);\n    }\n  });\n\n  const channelUpdater = (channel: SendbirdBaseChannel) => {\n    if (channel.isOpenChannel() && !isDifferentChannel(channel, channel)) {\n      forceUpdate();\n    }\n  };\n\n  useConnectionHandler(sdk, handlerId, {\n    async onReconnectSucceeded() {\n      const lastMessage = messages[0];\n      if (!lastMessage) return;\n\n      const messageContext = {\n        updatedMessages: [] as SendbirdBaseMessage[],\n        addedMessages: [] as SendbirdBaseMessage[],\n        deletedMessageIds: [] as number[],\n      };\n      const changeLogsContext = {\n        hasMore: false,\n        token: '',\n      };\n      const messageQueryContext = {\n        hasMore: false,\n        timestamp: lastMessage.createdAt,\n      };\n\n      // Updated & Deleted messages\n      const changelogsParams = {\n        replyType: queryRef.current?.replyType,\n        includeMetaArray: queryRef.current?.includeMetaArray,\n        includeReactions: queryRef.current?.includeReactions,\n        includeThreadInfo: queryRef.current?.includeThreadInfo,\n        includeParentMessageInfo: queryRef.current?.includeParentMessageInfo,\n      };\n\n      const changeLogsByTS = await channel.getMessageChangeLogsSinceTimestamp(lastMessage.createdAt);\n      changeLogsContext.token = changeLogsByTS.token;\n      changeLogsContext.hasMore = changeLogsByTS.hasMore;\n      messageContext.updatedMessages.push(...changeLogsByTS.updatedMessages);\n      messageContext.deletedMessageIds.push(...changeLogsByTS.deletedMessageIds);\n\n      while (changeLogsContext.hasMore) {\n        const changeLogsByToken = await channel.getMessageChangeLogsSinceToken(changeLogsByTS.token, changelogsParams);\n        changeLogsContext.token = changeLogsByToken.token;\n        changeLogsContext.hasMore = changeLogsByToken.hasMore;\n        messageContext.updatedMessages.push(...changeLogsByToken.updatedMessages);\n        messageContext.deletedMessageIds.push(...changeLogsByToken.deletedMessageIds);\n      }\n\n      // Added messages\n      const messageQueryParams = {\n        prevResultSize: 0,\n        nextResultSize: queryRef.current?.limit ?? 100,\n        reverse: queryRef.current?.reverse,\n        includeParentMessageInfo: queryRef.current?.includeParentMessageInfo,\n        includeThreadInfo: queryRef.current?.includeThreadInfo,\n        includeReactions: queryRef.current?.includeReactions,\n        includeMetaArray: queryRef.current?.includeMetaArray,\n        replyType: queryRef.current?.replyType,\n        customTypesFilter: queryRef.current?.customTypesFilter,\n        messageTypeFilter: queryRef.current?.messageTypeFilter,\n        senderUserIdsFilter: queryRef.current?.senderUserIdsFilter,\n        showSubchannelMessagesOnly: queryRef.current?.showSubchannelMessagesOnly,\n      };\n\n      const queriedMessages = await channel.getMessagesByTimestamp(lastMessage.createdAt, messageQueryParams);\n      messageQueryContext.hasMore = queriedMessages.length > 0;\n      if (messageQueryContext.hasMore) {\n        messageQueryContext.timestamp = queriedMessages[0].createdAt;\n        messageContext.addedMessages.unshift(...queriedMessages);\n      }\n\n      while (messageQueryContext.hasMore) {\n        const queriedMessages = await channel.getMessagesByTimestamp(messageQueryContext.timestamp, messageQueryParams);\n        messageQueryContext.hasMore = queriedMessages.length > 0;\n        if (messageQueryContext.hasMore) {\n          messageQueryContext.timestamp = queriedMessages[0].createdAt;\n          messageContext.addedMessages.unshift(...queriedMessages);\n        }\n      }\n\n      // Update to View\n      updateMessages(\n        [...messageContext.addedMessages, ...messageContext.updatedMessages],\n        false,\n        sdk.currentUser.userId,\n      );\n      deleteMessages(messageContext.deletedMessageIds, []);\n\n      if (messageContext.addedMessages.length > 0) {\n        if (options?.shouldCountNewMessages?.()) {\n          updateNewMessages(messageContext.addedMessages, false, sdk.currentUser.userId);\n        }\n        if (options?.onMessagesReceived) {\n          options.onMessagesReceived(messageContext.addedMessages);\n        }\n      }\n    },\n  });\n\n  useChannelHandler(\n    sdk,\n    handlerId,\n    {\n      // Messages\n      onMessageReceived(eventChannel, message) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n        if (isMyMessage(message, sdk.currentUser.userId)) return;\n\n        updateMessages([message], false, sdk.currentUser.userId);\n        if (options?.shouldCountNewMessages?.()) {\n          updateNewMessages([message], false, sdk.currentUser.userId);\n        }\n        if (options?.onMessagesReceived) {\n          options.onMessagesReceived([message]);\n        }\n      },\n      onMessageUpdated(eventChannel, message) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n        if (isMyMessage(message, sdk.currentUser.userId)) return;\n\n        updateMessages([message], false, sdk.currentUser.userId);\n      },\n      onMessageDeleted(eventChannel, messageId) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n        deleteMessages([messageId], []);\n        deleteNewMessages([messageId], []);\n      },\n      // Channels\n      onChannelChanged: channelUpdater,\n      onChannelFrozen: channelUpdater,\n      onChannelUnfrozen: channelUpdater,\n      onChannelParticipantCountChanged(eventChannel) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n        channelUpdater(eventChannel);\n      },\n      onChannelDeleted(channelUrl, type) {\n        if (channel.url === channelUrl && type === 'open') {\n          options?.onChannelDeleted?.();\n        }\n      },\n      // Users\n      onOperatorUpdated: channelUpdater,\n      onUserUnbanned: channelUpdater,\n      onUserMuted: channelUpdater,\n      onUserUnmuted: channelUpdater,\n      onUserBanned(eventChannel, bannedUser) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n\n        if (bannedUser.userId === sdk.currentUser.userId) {\n          options?.onChannelDeleted?.();\n        } else {\n          channelUpdater(eventChannel);\n        }\n      },\n    },\n    'open',\n  );\n\n  useAsyncEffect(async () => {\n    updateLoading(true);\n\n    try {\n      await channel.enter();\n      await init(userId);\n    } catch (error) {\n      options?.onError?.(error);\n      options?.onChannelDeleted?.();\n    } finally {\n      updateLoading(false);\n    }\n\n    return () => {\n      channel.exit().catch(NOOP);\n    };\n  }, [channel.url, userId]);\n\n  const refresh: ReturnType<UseOpenChannelMessages>['refresh'] = useFreshCallback(async () => {\n    updateRefreshing(true);\n    await init(userId);\n    updateRefreshing(false);\n  });\n\n  const prev: ReturnType<UseOpenChannelMessages>['prev'] = useFreshCallback(async () => {\n    if (queryRef.current && queryRef.current?.hasNext) {\n      const list = await queryRef.current?.load();\n      updateMessages(list, false, sdk.currentUser.userId);\n    }\n  });\n  const hasPrev: ReturnType<UseOpenChannelMessages>['hasPrev'] = useFreshCallback(\n    () => queryRef.current?.hasNext ?? false,\n  );\n\n  const next: ReturnType<UseOpenChannelMessages>['next'] = useFreshCallback(ASYNC_NOOP);\n  const hasNext: ReturnType<UseOpenChannelMessages>['hasNext'] = useFreshCallback(() => false);\n\n  const sendUserMessage: ReturnType<UseOpenChannelMessages>['sendUserMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendUserMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isUserMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isUserMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, sentMessage) => {\n            updateMessages([sentMessage], false, sdk.currentUser.userId);\n            reject(err);\n          });\n      });\n    },\n  );\n\n  const sendFileMessage: ReturnType<UseOpenChannelMessages>['sendFileMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isFileMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isFileMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, sentMessage) => {\n            updateMessages([sentMessage], false, sdk.currentUser.userId);\n            reject(err);\n          });\n      });\n    },\n  );\n\n  const updateUserMessage: ReturnType<UseOpenChannelMessages>['updateUserMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateUserMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n  );\n  const updateFileMessage: ReturnType<UseOpenChannelMessages>['updateFileMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateFileMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n  );\n  const resendMessage: ReturnType<UseOpenChannelMessages>['resendMessage'] = useFreshCallback(async (failedMessage) => {\n    const message = await (() => {\n      if (failedMessage.isUserMessage()) return channel.resendUserMessage(failedMessage);\n      if (failedMessage.isFileMessage()) return channel.resendFileMessage(failedMessage);\n      return null;\n    })();\n\n    if (message) updateMessages([message], false, sdk.currentUser.userId);\n  });\n  const deleteMessage: ReturnType<UseOpenChannelMessages>['deleteMessage'] = useFreshCallback(async (message) => {\n    if (message.sendingStatus === 'succeeded') {\n      if (message.isUserMessage()) await channel.deleteMessage(message);\n      if (message.isFileMessage()) await channel.deleteMessage(message);\n    } else {\n      deleteMessages([message.messageId], [message.reqId]);\n    }\n  });\n  const resetNewMessages: ReturnType<UseOpenChannelMessages>['resetNewMessages'] = useFreshCallback(() => {\n    updateNewMessages([], true, sdk.currentUser.userId);\n  });\n\n  return {\n    loading,\n    refreshing,\n    refresh,\n    messages,\n    newMessages,\n    next,\n    hasNext,\n    prev,\n    hasPrev,\n    sendUserMessage,\n    sendFileMessage,\n    updateUserMessage,\n    updateFileMessage,\n    resendMessage,\n    deleteMessage,\n    resetNewMessages,\n\n    nextMessages: newMessages,\n    newMessagesFromMembers: newMessages,\n  };\n};\n"],"mappings":"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"}