{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type React from 'react';\n\nimport type { UseGroupChannelMessagesOptions } from '@sendbird/uikit-chat-hooks';\nimport type {\n  OnBeforeHandler,\n  SendbirdFileMessage,\n  SendbirdFileMessageCreateParams,\n  SendbirdFileMessageUpdateParams,\n  SendbirdGroupChannel,\n  SendbirdMessage,\n  SendbirdUser,\n  SendbirdUserMessage,\n  SendbirdUserMessageCreateParams,\n  SendbirdUserMessageUpdateParams,\n} from '@sendbird/uikit-utils';\n\nimport type { ChannelInputProps, SuggestedMentionListProps } from '../../components/ChannelInput';\nimport type { ChannelMessageListProps } from '../../components/ChannelMessageList';\nimport type { CommonComponent } from '../../types';\nimport type { PubSub } from '../../utils/pubsub';\n\nexport interface GroupChannelProps {\n  Fragment: {\n    channel: SendbirdGroupChannel;\n    onChannelDeleted: () => void;\n    onPressHeaderLeft: GroupChannelProps['Header']['onPressHeaderLeft'];\n    onPressHeaderRight: GroupChannelProps['Header']['onPressHeaderRight'];\n    onPressMediaMessage?: GroupChannelProps['MessageList']['onPressMediaMessage'];\n\n    onBeforeSendUserMessage?: OnBeforeHandler<SendbirdUserMessageCreateParams>;\n    onBeforeSendFileMessage?: OnBeforeHandler<SendbirdFileMessageCreateParams>;\n    onBeforeUpdateUserMessage?: OnBeforeHandler<SendbirdUserMessageUpdateParams>;\n    onBeforeUpdateFileMessage?: OnBeforeHandler<SendbirdFileMessageUpdateParams>;\n\n    renderMessage?: GroupChannelProps['MessageList']['renderMessage'];\n    renderNewMessagesButton?: GroupChannelProps['MessageList']['renderNewMessagesButton'];\n    renderScrollToBottomButton?: GroupChannelProps['MessageList']['renderScrollToBottomButton'];\n\n    enableTypingIndicator?: GroupChannelProps['Provider']['enableTypingIndicator'];\n    enableMessageGrouping?: GroupChannelProps['MessageList']['enableMessageGrouping'];\n\n    keyboardAvoidOffset?: GroupChannelProps['Provider']['keyboardAvoidOffset'];\n    flatListProps?: GroupChannelProps['MessageList']['flatListProps'];\n    sortComparator?: UseGroupChannelMessagesOptions['sortComparator'];\n    collectionCreator?: UseGroupChannelMessagesOptions['collectionCreator'];\n    queryCreator?: UseGroupChannelMessagesOptions['queryCreator'];\n\n    searchItem?: GroupChannelProps['MessageList']['searchItem'];\n\n    /** @deprecated Please use `onPressMediaMessage` instead **/\n    onPressImageMessage?: GroupChannelProps['MessageList']['onPressImageMessage'];\n  };\n  Header: {\n    shouldHideRight: () => boolean;\n    onPressHeaderLeft: () => void;\n    onPressHeaderRight: () => void;\n  };\n  MessageList: Pick<\n    ChannelMessageListProps<SendbirdGroupChannel>,\n    | 'enableMessageGrouping'\n    | 'currentUserId'\n    | 'channel'\n    | 'messages'\n    | 'newMessages'\n    | 'scrolledAwayFromBottom'\n    | 'onScrolledAwayFromBottom'\n    | 'onTopReached'\n    | 'onBottomReached'\n    | 'onResendFailedMessage'\n    | 'onDeleteMessage'\n    | 'onPressMediaMessage'\n    | 'renderMessage'\n    | 'renderNewMessagesButton'\n    | 'renderScrollToBottomButton'\n    | 'flatListProps'\n    | 'onPressImageMessage'\n    | 'hasNext'\n    | 'searchItem'\n  > & {\n    onResetMessageList: (callback?: () => void) => void;\n\n    /** @deprecated Please use `newMessages` instead */\n    newMessagesFromMembers: SendbirdMessage[];\n    /** @deprecated Please use `newMessages` instead */\n    nextMessages: SendbirdMessage[];\n  };\n  Input: Pick<\n    ChannelInputProps,\n    | 'shouldRenderInput'\n    | 'onPressSendUserMessage'\n    | 'onPressSendFileMessage'\n    | 'onPressUpdateUserMessage'\n    | 'onPressUpdateFileMessage'\n    | 'SuggestedMentionList'\n    | 'onSendFileMessage'\n    | 'onSendUserMessage'\n    | 'onUpdateFileMessage'\n    | 'onUpdateUserMessage'\n  >;\n\n  SuggestedMentionList: SuggestedMentionListProps;\n  Provider: {\n    channel: SendbirdGroupChannel;\n    enableTypingIndicator: boolean;\n    keyboardAvoidOffset?: number;\n    groupChannelPubSub: PubSub<GroupChannelPubSubContextPayload>;\n  };\n}\n\n/**\n * Internal context for GroupChannel\n * For example, the developer can create a custom header\n * with getting data from the domain context\n * */\nexport interface GroupChannelContextsType {\n  Fragment: React.Context<{\n    headerTitle: string;\n    channel: SendbirdGroupChannel;\n    messageToEdit?: SendbirdUserMessage | SendbirdFileMessage;\n    setMessageToEdit: (msg?: SendbirdUserMessage | SendbirdFileMessage) => void;\n    keyboardAvoidOffset?: number;\n  }>;\n  TypingIndicator: React.Context<{\n    typingUsers: SendbirdUser[];\n  }>;\n  PubSub: React.Context<PubSub<GroupChannelPubSubContextPayload>>;\n}\nexport interface GroupChannelModule {\n  Provider: CommonComponent<GroupChannelProps['Provider']>;\n  Header: CommonComponent<GroupChannelProps['Header']>;\n  MessageList: CommonComponent<GroupChannelProps['MessageList']>;\n  Input: CommonComponent<GroupChannelProps['Input']>;\n  SuggestedMentionList: CommonComponent<GroupChannelProps['SuggestedMentionList']>;\n  StatusEmpty: CommonComponent;\n  StatusLoading: CommonComponent;\n}\n\nexport type GroupChannelFragment = CommonComponent<GroupChannelProps['Fragment']>;\n\nexport type GroupChannelPubSubContextPayload =\n  | {\n      type: 'MESSAGE_SENT_PENDING' | 'MESSAGE_SENT_SUCCESS';\n      data: {\n        message: SendbirdUserMessage | SendbirdFileMessage;\n      };\n    }\n  | {\n      type: 'MESSAGES_RECEIVED';\n      data: {\n        messages: SendbirdMessage[];\n      };\n    };\n"],"mappings":""}