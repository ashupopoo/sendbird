{"version":3,"names":["useCallback","Logger","useSendbirdChat","usePushTokenRegistration","cacheRestrictCodes","isCacheRestrictedError","error","some","code","initEmoji","sdk","emojiManager","init","appInfo","emojiHash","container","getAllEmoji","useConnection","setCurrentUser","features","registerPushTokenForCurrentUser","unregisterPushTokenForCurrentUser","connect","userId","opts","debug","user","accessToken","nickname","updateCurrentUserInfo","then","updatedUser","catch","e","warn","useUserIdForNicknameEnabled","autoPushTokenRegistrationEnabled","isCacheEnabled","message","clearCachedData","currentUser","disconnect","undefined","reconnect"],"sources":["useConnection.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nimport { Logger, SendbirdChatSDK, SendbirdError, SendbirdUser } from '@sendbird/uikit-utils';\n\nimport type EmojiManager from '../libs/EmojiManager';\nimport { useSendbirdChat } from './useContext';\nimport usePushTokenRegistration from './usePushTokenRegistration';\n\ntype ConnectOptions = { nickname?: string; accessToken?: string };\n\nconst cacheRestrictCodes = [400300, 400301, 400302, 400310];\nfunction isCacheRestrictedError(error: SendbirdError) {\n  return cacheRestrictCodes.some((code) => error.code === code);\n}\n\nasync function initEmoji(sdk: SendbirdChatSDK, emojiManager: EmojiManager) {\n  await emojiManager.init();\n  if (sdk.appInfo.emojiHash !== emojiManager.emojiHash) {\n    try {\n      const container = await sdk.getAllEmoji();\n      await emojiManager.init(container);\n    } catch {}\n  }\n}\n\nconst useConnection = () => {\n  const { sdk, emojiManager, setCurrentUser, features } = useSendbirdChat();\n  const { registerPushTokenForCurrentUser, unregisterPushTokenForCurrentUser } = usePushTokenRegistration();\n\n  const connect = useCallback(\n    async (userId: string, opts?: ConnectOptions): Promise<SendbirdUser> => {\n      try {\n        Logger.debug('[useConnection]', 'connect start:', userId);\n        let user = await sdk.connect(userId, opts?.accessToken);\n\n        if (opts?.nickname) {\n          Logger.debug('[useConnection]', 'nickname-sync start:', opts.nickname);\n          await sdk\n            .updateCurrentUserInfo({ nickname: opts.nickname })\n            .then((updatedUser) => (user = updatedUser))\n            .catch((e) => Logger.warn('[useConnection]', 'nickname-sync failure', e));\n        } else if (features.useUserIdForNicknameEnabled) {\n          await sdk.updateCurrentUserInfo({ nickname: userId }).then((updatedUser) => (user = updatedUser));\n        }\n\n        if (features.autoPushTokenRegistrationEnabled) {\n          Logger.debug('[useConnection]', 'autoPushTokenRegistration enabled, register for current user');\n          await registerPushTokenForCurrentUser().catch((e) => {\n            Logger.warn('[useConnection]', 'autoPushToken Registration failure', e);\n          });\n        }\n\n        await initEmoji(sdk, emojiManager);\n\n        Logger.debug('[useConnection]', 'connected! (online)');\n        setCurrentUser(user);\n\n        return user;\n      } catch (e) {\n        const error = e as unknown as SendbirdError;\n\n        if (sdk.isCacheEnabled) {\n          if (isCacheRestrictedError(error)) {\n            Logger.warn('[useConnection]', 'offline connect restricted', error.message, error.code);\n            Logger.warn('[useConnection]', 'clear cached-data');\n            await sdk.clearCachedData().catch((e) => Logger.warn('[useConnection]', 'clear cached-data failure', e));\n          } else if (sdk.currentUser) {\n            await initEmoji(sdk, emojiManager);\n\n            Logger.debug('[useConnection]', 'connected! (offline)');\n            setCurrentUser(sdk.currentUser);\n            return sdk.currentUser;\n          }\n        }\n\n        Logger.warn('[useConnection]', 'connect failure', error.message, error.code);\n        throw error;\n      }\n    },\n    [sdk, registerPushTokenForCurrentUser, features.autoPushTokenRegistrationEnabled],\n  );\n\n  const disconnect = useCallback(async () => {\n    Logger.debug('[useConnection]', 'disconnect start');\n\n    if (features.autoPushTokenRegistrationEnabled) {\n      Logger.debug('[useConnection]', 'autoPushTokenRegistration enabled, unregister for current user');\n      await unregisterPushTokenForCurrentUser().catch((e) => {\n        Logger.warn('[useConnection]', 'autoPushToken unregister failure', e);\n      });\n    }\n\n    await sdk.disconnect().then(() => setCurrentUser(undefined));\n    Logger.debug('[useConnection]', 'disconnected!');\n  }, [sdk, unregisterPushTokenForCurrentUser, features.autoPushTokenRegistrationEnabled]);\n\n  return { connect, disconnect, reconnect: () => sdk.reconnect() };\n};\n\nexport default useConnection;\n"],"mappings":"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"}